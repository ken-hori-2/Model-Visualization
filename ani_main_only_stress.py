from cProfile import label
import matplotlib.pyplot as plt
from matplotlib import animation
import numpy as np
from matplotlib import patches
from matplotlib import animation, gridspec
from sklearn import preprocessing

# エージェントの移動の様子を可視化します
# 参考URL http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/

# animation_Edit.py の整理ver.
# ani_integrate_test3_main.py の整理ver.

class Anim():
    
    def __init__(self, STATE_HISTORY):

        self.state_history = STATE_HISTORY
        # self.fig = plt.figure(figsize=(7, 7))
        self.fig = plt.figure(figsize=(8, 8.5))
        self.ax = plt.gca()
        self.ims = []

        # self.gs = gridspec.GridSpec(2, 2, height_ratios=(1, 1))
        # self.gs = gridspec.GridSpec(2, 2, height_ratios=(3, 1))
        self.gs = gridspec.GridSpec(3, 3) # , height_ratios=(1, 1))
        # self.ax = [plt.subplot(self.gs[0, 2]), plt.subplot(self.gs[0, 1]), plt.subplot(self.gs[1, 1])]
        ss1 = self.gs.new_subplotspec((0, 0), rowspan=3,colspan=1)
        ss2 = self.gs.new_subplotspec((1, 1), rowspan=1,colspan=2)
        self.ax = [plt.subplot(ss1), plt.subplot(ss2)] # , plt.subplot(ss3), plt.subplot(ss4), plt.subplot(ss5)]
        "-----------------------------------------------------"
        # グラフデータの初期化
        self.T = []
        # Statas数推移
        self.Stress_List= []
        self.im = []
        self.TEST = []
        self.legend_flag = True

    def view_plot_text(self):

        
        # case2
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0, 0.364, 0.728, 1.092, 1.456, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0, 0.1, 0.2, 0.30000000000000004, 0.4, 0, 0.333, 0.666, 0.9990000000000001, 1.332, 1.665, 1.998, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 0, 0, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 0, 0, 2.219, 2.219, 2.219, 2.219, 2.219, 0, 0, 2.161, 2.161, 2.161, 2.161, 2.161, 2.161, 2.161, 2.161, 2.161, 2.161, 0, 0, 2.353, 2.353]
        "-----------------------------"
        # case1
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0, 0.333, 0.666, 0.9990000000000001, 1.332, 0, 0.143, 0.286, 0.42899999999999994, 0.572, 0.715, 0, 0.125, 0.25, 0.375, 0.5, 0, 0.333, 0.666, 0.9990000000000001, 1.332, 1.665, 1.998, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 0, 0, 2.26, 2.26, 2.26, 2.26, 2.26, 2.26, 0, 0, 2.302, 2.302, 2.302, 2.302, 2.302, 0, 0, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 2.166, 0, 0, 2.215, 2.215]

        "-- 変更前 --"
        # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0, 0.364, 0.728, 1.092, 1.456, 0, 0.125, 0.25, 0.375, 0.5, 0.625, 0, 0.1, 0.2, 0.30000000000000004, 0.4, 0, 0.333, 0.666, 0.9990000000000001, 1.332, 1.665, 1.998, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 0, 0, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 0, 0, 2.37, 2.37, 2.37, 2.37, 2.37, 0, 0, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 0, 0, 2.071, 2.071]
        "-- テストデータ① --"
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25,   0.25, 0.614, 0.978, 1.342, 1.706,   0.46, 0.585, 0.71, 0.835, 0.96, 1.085,   0.38, 0.48, 0.58, 0.68, 0.78,   0.6, 0.9, 1.2, 1.5, 1.9, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 0.38, 0.38, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 0.25, 0.25, 2.37, 2.37, 2.37, 2.37, 2.37, 0.46, 0.46, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 0.6, 0.6, 2.071, 2.071]
        "-- テストデータ② --"
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25,   0.5, 0.864, 1.228, 1.592, 1.956,   0.916, 1.025, 1.15, 1.275, 1.4, 1.525,   0.905, 1.0, 1.1, 1.2, 1.3,   0.9, 1.2, 1.56, 1.9, 2.2, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331, 2.331,   1.711, 1.711, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174, 2.174,   1.424, 1.424, 2.37, 2.37, 2.37, 2.37, 2.37,   1.83, 1.83, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 1.6, 1.6, 2.071, 2.071]

        # "-- test1104 --"
        # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 0.5, 0.5, 0.864, 1.228, 1.592, 1.416, 1.416, 1.541, 1.666, 1.791, 1.916, 1.4209999999999998, 1.4209999999999998, 1.521, 1.621, 1.721, 1.4210000000000003, 1.4210000000000003, 1.7540000000000002, 2.087, 0, 0, 2.254, 2.254, 2.254, 2.254, 2.254, 0, 0, 2.325, 2.325, 2.325, 2.325, 2.325, 2.325, 2.325, 2.325, 2.325, 2.325, 0, 0, 2.127, 2.127, 2.127, 2.127, 2.127, 0, 0, 2.22, 2.22]
        # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 0.5, 0.5, 0.864, 1.228, 1.592, 1.416, 1.416, 1.541, 1.666, 1.791, 1.916, 1.4209999999999998, 1.4209999999999998, 1.521, 1.621, 1.721, 1.4210000000000003, 1.4210000000000003, 1.7540000000000002, 2.087, 1.6870000000000003, -0.4, 2.484, 2.484, 2.484, 2.484, 2.484, 1.8639999999999999, 1.8639999999999999, 2.133, 2.133, 2.133, 2.133, 2.133, 2.133, 2.133, 2.133, 2.133, 2.133, 1.383, 1.383, 2.046, 2.046, 2.046, 2.046, 2.046, 1.5059999999999998, 1.5059999999999998, 2.166, 2.166]
        # "-- 2回減少 --"
        # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 0.5, 0.5, 0.864, 1.228, 1.592, 1.416, 1.416, 1.541, 1.666, 1.791, 1.916, 1.4209999999999998, 1.4209999999999998, 1.521, 1.621, 1.721, 1.4210000000000003, 1.4210000000000003, 1.7540000000000002, 2.087, 1.6870000000000003, 1.2870000000000004, 2.289, 2.289, 2.289, 2.289, 2.289, 1.669, 1.049, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 2.003, 1.2530000000000001, 0.5030000000000001, 2.454, 2.454, 2.454, 2.454, 2.454, 1.9140000000000001, 1.374, 2.367, 2.367]
        # "-- 1回減少 --"
        # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 0.5, 0.5, 0.864, 1.228, 1.592, 1.416, 1.416, 1.541, 1.666, 1.791, 1.916, 1.4209999999999998, 1.4209999999999998, 1.521, 1.621, 1.721, 1.4210000000000003, 1.4210000000000003, 1.7540000000000002, 2.087, 1.6870000000000003, 1.6870000000000003, 2.138, 2.138, 2.138, 2.138, 2.138, 1.5179999999999998, 1.5179999999999998, 2.362, 2.362, 2.362, 2.362, 2.362, 2.362, 2.362, 2.362, 2.362, 2.362, 1.612, 1.612, 2.275, 2.275, 2.275, 2.275, 2.275, 1.7349999999999999, 1.7349999999999999, 2.443, 2.443]
        "-- リセットの時と同じタイミングに修正 --"
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.864, 1.228, 1.592, 1.956, 1.416, 1.541, 1.666, 1.791, 1.916, 2.041, 1.4209999999999998, 1.521, 1.621, 1.721, 1.8210000000000002, 1.4210000000000003, 1.7540000000000002, 2.087, 1.6870000000000003, 1.6870000000000003, 2.017, 2.017, 2.017, 2.017, 2.017, 1.3969999999999998, 1.3969999999999998, 2.496, 2.496, 2.496, 2.496, 2.496, 2.496, 2.496, 2.496, 2.496, 2.496, 1.746, 1.746, 2.343, 2.343, 2.343, 2.343, 2.343, 1.803, 1.803, 2.406, 2.406]
        
        "refer 変更"
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.864, 1.228, 1.592, 1.956, 1.416, 1.541, 1.666, 1.791, 1.916, 2.041, 1.4209999999999998, 1.521, 1.621, 1.721, 1.8210000000000002, 1.4210000000000003, 1.6210000000000002, 1.8210000000000002, 2.0210000000000004, 2.0210000000000004, 1.6210000000000004, 1.6210000000000004, 2.17, 2.17, 2.17, 2.17, 2.17, 1.5499999999999998, 1.5499999999999998, 2.041, 2.041, 2.041, 2.041, 2.041, 2.041, 2.041, 2.041, 2.041, 2.041, 1.291, 1.291, 2.171, 2.171, 2.171, 2.171, 2.171, 1.6309999999999998, 1.6309999999999998, 2.478, 2.478]
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.864, 1.228, 1.592, 1.956, 1.416, 1.541, 1.666, 1.791, 1.916, 2.041, 1.4209999999999998, 1.521, 1.621, 1.721, 1.8210000000000002, 1.4210000000000003, 1.5210000000000004, 1.6210000000000004, 1.7210000000000005, 1.8210000000000006, 1.9210000000000007, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 1.6210000000000009, 1.6210000000000009, 2.454, 2.454, 2.454, 2.454, 2.454, 1.834, 1.834, 2.425, 2.425, 2.425, 2.425, 2.425, 2.425, 2.425, 2.425, 2.425, 2.425, 1.6749999999999998, 1.6749999999999998, 2.396, 2.396, 2.396, 2.396, 2.396, 1.8559999999999999, 1.8559999999999999, 2.333, 2.333]
            # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.864, 1.228, 1.592, 1.956, 1.416, 1.559, 1.702, 1.845, 1.988, 2.131, 1.4209999999999998, 1.521, 1.621, 1.721, 1.8210000000000002, 1.4210000000000003, 1.5210000000000004, 1.6210000000000004, 1.7210000000000005, 1.8210000000000006, 1.9210000000000007, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 2.021000000000001, 1.3110000000000008, 1.3110000000000008, 2.23, 2.23, 2.23, 2.23, 2.23, 2.23, 2.23, 2.23, 2.23, 2.23, 1.48, 1.48, 2.136, 2.136, 2.136, 2.136, 2.136, 1.596, 1.596, 2.023, 2.023, 2.023, 2.023, 2.023, 2.023, 2.023, 2.023, 2.023, 2.023, 1.6230000000000002, 1.6230000000000002, 2.421, 2.421]

            # self.stress = [0.0, 0.167, 0.334, 0.501, 0.668, 0.8350000000000001, -0.004999999999999893, 0.16200000000000012, 0.3290000000000001, 0.4960000000000001, 0.6630000000000001, -0.006999999999999784, 0.16000000000000023, 0.32700000000000023, 0.4940000000000002, 0.6610000000000003, 0.8280000000000003, -0.011999999999999678, 0.15500000000000033, 0.32200000000000034, 0.4890000000000003, 0.6560000000000004, -0.013999999999999568, 0.15300000000000044, 0.32000000000000045, 0.48700000000000043, 0.6540000000000005, 0.8210000000000005, 0.9880000000000005, 1.1550000000000005, 1.3220000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 1.4890000000000005, 0.6490000000000006, 0.6490000000000006, 2.203, 2.203, 2.203, 2.203, 2.203, 1.533, 1.533, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 2.077, 1.237, 1.237, 2.094, 2.094, 2.094, 2.094, 2.094, 1.424, 1.424, 2.032, 2.032]
            # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.833, 1.166, 1.4989999999999999, 1.8319999999999999, 1.162, 1.305, 1.448, 1.591, 1.734, 1.877, 1.167, 1.2670000000000001, 1.3670000000000002, 1.4670000000000003, 1.5670000000000004, 1.1670000000000003, 1.2670000000000003, 1.3670000000000004, 1.4670000000000005, 1.5670000000000006, 1.6670000000000007, 1.7670000000000008, 1.8670000000000009, 1.967000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 2.067000000000001, 1.357000000000001, 1.357000000000001, 2.318, 2.318, 2.318, 2.318, 2.318, 2.318, 1.6480000000000001, 1.6480000000000001, 2.261, 2.261, 2.261, 2.261, 2.261, 1.5110000000000001, 1.5110000000000001, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 2.122, 1.722, 1.722, 2.062, 2.062]
            # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.786, 1.072, 1.358, 1.6440000000000001, 0.7840000000000001, 1.0060000000000002, 1.2280000000000002, 1.4500000000000002, 1.6720000000000002, 1.8940000000000001, 1.004, 1.29, 1.576, 1.862, 2.148, 1.2880000000000003, 1.3880000000000003, 1.4880000000000004, 1.5880000000000005, 1.6880000000000006, 1.7880000000000007, 1.8880000000000008, 1.9880000000000009, 2.088000000000001, 2.088000000000001, 2.088000000000001, 2.088000000000001, 2.088000000000001, 2.088000000000001, 2.088000000000001, 1.228000000000001, 1.228000000000001, 2.413, 2.413, 2.413, 2.413, 2.413, 1.5229999999999997, 1.5229999999999997, 2.128, 2.128, 2.128, 2.128, 2.128, 2.128, 1.2680000000000002, 1.2680000000000002, 2.239, 2.239, 2.239, 2.239, 2.239, 1.4889999999999999, 1.4889999999999999, 2.29, 2.29]
        
        "case3"
        # self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.833, 1.166, 1.4989999999999999, 1.8319999999999999, 1.162, 1.287, 1.412, 1.537, 1.662, 1.787, 1.1669999999999998, 1.267, 1.367, 1.467, 1.5670000000000002, 1.1670000000000003, 1.5000000000000002, 1.8330000000000002, 2.1660000000000004, 2.1660000000000004, 1.7660000000000005, 1.7660000000000005, 2.472, 2.472, 2.472, 2.472, 2.472, 1.8519999999999999, 1.8519999999999999, 2.232, 2.232, 2.232, 2.232, 2.232, 2.232, 1.5620000000000003, 1.5620000000000003, 2.072, 2.072, 2.072, 2.072, 2.072, 1.322, 1.322, 2.348, 2.348]
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.7, 0.8999999999999999, 1.0999999999999999, 1.2999999999999998, 0.4999999999999998, 0.6249999999999998, 0.7499999999999998, 0.8749999999999998, 0.9999999999999998, 1.1249999999999998, 0.5049999999999998, 0.6049999999999998, 0.7049999999999997, 0.8049999999999997, 0.9049999999999997, 0.5049999999999997, 0.8379999999999996, 1.1709999999999996, 1.5039999999999996, 1.8369999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 2.1699999999999995, 1.3699999999999994, 1.3699999999999994, 2.238, 2.238, 2.238, 2.238, 2.238, 1.488, 1.488, 2.252, 2.252, 2.252, 2.252, 2.252, 2.252, 2.252, 2.252, 2.252, 2.252, 1.6319999999999997, 1.6319999999999997, 2.294, 2.294, 2.294, 2.294, 2.294, 1.8940000000000001, 1.8940000000000001, 2.119, 2.119]
        self.stress = [0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 0.5, 0.833, 1.166, 1.4989999999999999, 1.8319999999999999, 1.162, 1.329, 1.496, 1.663, 1.83, 1.997, 1.157, 1.282, 1.407, 1.532, 1.657, 1.157, 1.49, 1.823, 2.156, 2.156, 2.156, 2.156, 2.156, 2.156, 1.3160000000000003, 1.3160000000000003, 2.38, 2.38, 2.38, 2.38, 2.38, 2.38, 1.71, 1.71, 2.145, 2.145, 2.145, 2.145, 2.145, 1.395, 1.395, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 2.286, 1.786, 1.786, 2.352, 2.352]
        
        import matplotlib.pyplot as plt

        
        import numpy as np
        from PIL import Image

        # plt.plot([20.5], [20.5], marker="s", color='black', markersize = 520, alpha = 0.8)
        self.ax[0].plot([20.5], [20.5], marker="s", color='black', markersize = 520, alpha = 0.8)

        # 描画範囲の設定と目盛りを消す設定
        self.ax[0].set_xlim(-7.5, 41.5)
        self.ax[0].set_ylim(-10.5, 51.5)
        self.ax[0].tick_params(axis='both', which='both', bottom='off', top='off',
                        labelbottom='off', right='off', left='off', labelleft='off')
        # self.ax[0].legend()
        test = [[22, 8], [23, 8], [24, 8], [25, 8], [26, 8], [27, 8], [21, 8], [20, 8], [19, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [2, 8], [1, 8], [0, 8]]

        # 格子状
        # test = [[22, 8], [23, 8], [23, 9], [23, 7], [23, 6], [24, 6], [22, 6], [21, 6], [23, 5], [23, 4], [24, 4], [25, 4], [26, 4], [22, 4], [21, 4], [20, 4], [19, 4], [18, 4], [18, 5], [18, 6], [17, 4], [18, 3], [18, 2], [17, 2], [16, 2], [15, 2], [14, 2], [13, 2], [12, 2], [13, 3], [13, 1], [13, 0], [12, 0], [11, 0], [10, 0], [14, 0], [15, 0], [16, 0], [9, 0], [8, 0], [7, 0], [11, 2], [10, 2], [9, 2], [8, 2], [7, 2], [6, 2], [5, 2], [6, 1], [6, 3], [6, 4], [6, 5], [5, 4], [4, 4], [3, 4], [2, 4], [6, 6], [7, 6], [8, 6], [6, 7], [6, 8], [7, 8], [6, 9], [6, 10], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [13, 9], [13, 10], [12, 10], [11, 10], [10, 10], [9, 10], [8, 10], [7, 10], [5, 8], [13, 7], [4, 8], [3, 8], [2, 8], [1, 8], [0, 8], [0, 7], [0, 9], [0, 10], [1, 10], [2, 10], [3, 10], [4, 10], [5, 10], [13, 6], [14, 6], [15, 6], [16, 6], [17, 6], [18, 7], [18, 8], [19, 8], [17, 8], [16, 8], [15, 8], [18, 9], [18, 10], [19, 10], [17, 10], [16, 10], [15, 10], [14, 10], [18, 11], [20, 10], [21, 10], [22, 10], [23, 10], [23, 11], [23, 12], [22, 12], [23, 13], [24, 12], [25, 12], [26, 12], [24, 10], [21, 12], [23, 14], [20, 12], [19, 12], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [19, 16], [20, 16], [21, 16], [17, 16], [22, 16], [23, 16], [24, 16], [25, 16], [23, 15], [25, 10], [24, 8], [25, 8], [21, 8], [26, 10], [22, 14], [21, 14], [24, 14], [25, 14], [26, 14], [27, 14], [28, 14], [28, 15], [20, 14], [17, 12], [19, 14], [17, 14], [16, 14], [15, 14], [14, 14], [13, 14], [13, 15], [13, 13], [13, 12], [14, 12], [13, 11], [12, 12], [11, 12], [20, 8], [19, 6], [28, 13], [25, 6], [26, 6], [27, 6], [28, 6], [28, 7], [28, 5], [28, 4], [27, 4], [23, 3], [23, 2], [22, 2], [21, 2], [20, 2], [23, 1], [24, 2], [23, 0], [22, 0], [21, 0], [20, 0], [24, 0], [25, 0], [25, 2], [26, 2], [27, 2], [28, 2], [28, 1], [28, 3], [28, 8], [26, 8], [27, 8], [27, 10], [28, 10], [28, 11], [28, 12], [27, 12], [28, 16], [27, 16], [26, 16], [28, 9], [12, 6], [13, 5], [13, 4], [14, 4], [15, 4], [12, 4], [5, 6], [9, 6], [10, 6], [11, 6], [12, 14], [13, 16], [14, 16], [15, 16], [15, 12], [12, 16], [11, 16], [10, 16], [9, 16], [8, 16], [10, 12], [9, 12], [8, 12], [7, 12], [16, 4], [11, 4], [10, 4], [9, 4], [8, 4], [7, 4], [19, 2], [18, 1], [18, 0], [17, 0], [19, 0], [6, 0], [5, 0], [4, 0], [3, 0], [28, 0], [20, 6], [1, 4], [0, 4], [0, 3], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [0, 1], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [16, 12], [6, 12], [6, 13], [6, 14], [7, 14], [5, 14], [6, 15], [8, 14], [9, 14], [10, 14], [11, 14], [6, 11], [0, 11], [0, 12], [1, 12], [2, 12], [3, 12], [4, 12], [5, 12], [0, 13], [0, 0], [1, 0], [2, 0], [27, 0], [26, 0], [16, 16], [0, 14], [0, 15], [1, 14], [2, 14], [3, 14], [4, 14], [0, 16], [6, 16], [7, 16], [5, 16], [4, 16], [3, 16], [2, 16], [1, 16]]
        for t in range(len(test)):


            state = test[t]
            y = 46-(state[0] + state[0] + 0.5) # 14.5)
            x = state[1] + state[1] + 0.5

            self.ax[0].plot([x], [y], marker="s", color='grey', markersize = 18)

        # LandMark = [[27, 8], [22, 8], [18, 8], [13, 8], [9, 8], [5, 8],  [0, 8]]
        LandMark = [[22, 8], [18, 8], [13, 8], [9, 8], [5, 8],  [0, 8]]

        
        # self.ax[0].plot([20.5], [20.5], marker="s", color='black', markersize = 520, alpha = 0.8)
        for t in range(len(LandMark)):
            state = LandMark[t]
            y = 46-(state[0] + state[0] + 0.5) # 14.5)
            x = state[1] + state[1] + 0.5

            if state == [0, 8]:
                # self.ax[0].plot([x], [y], marker="s", color='orange', markersize = 18, alpha = 0.5)
                # self.ax[0].plot([x], [y], marker="s", color='red', markersize = 18, alpha = 0.5)
                pass
            
            # 1024
            # add 1007
            elif state == [5, 8]: # or state == [9, 8]: # or state == [5, 8]:
                # self.ax[0].plot([x], [y], marker="s", color='orange', markersize = 18, alpha = 0.5)
                self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
                # self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 28, alpha = 0.5)
                # pass
            else:
                self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)

                
    def move_history(self):

        OVER_CAPACITY = 1.0

        for t in range(len(self.stress)): # state_history)): # フレームごとの描画内容

            self.T.append(t)
            self.im = []

            self.Stress_List.append(self.stress[t])
            self.im += (self.ax[1].plot(self.T, self.Stress_List, color="orange", alpha=0.7))

            state = self.state_history[t]  # 現在の場所を描く

            try:
                prev_state = self.state_history[t-1]
            except:
                pass
            

            if state[1] != 0:
                y = 46-(state[0] + state[0] + 0.5) # 14.5)
                x = state[1] + state[1] + 0.5
            else:
                x = 0.5
                y = 46-(state[0] + state[0] + 0.5) # 14.5)
                
            try:
                if state == prev_state:
                    
                    if state[0] == prev_state[0]:
                        # self.im += self.ax[0].plot(x, y, marker="s", color='y', markersize = 18, alpha = 0.5)
                        self.im += self.ax[0].plot(x, y, marker="o", color='y', markersize = 8)
                    else:
                        # self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 15, alpha = 0.5)
                        self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 8)

                   
                else:
                    # self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 15, alpha = 0.5)
                    self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 8)
            except:
                print("エラー(初回)")
                # self.im += self.ax[0].plot(x, y, marker="s", color='r', markersize = 15, alpha = 0.5)
                self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 8)
            self.ims.append(self.im)
            
            if t == 0:
                self.ims.append(self.im)

            #描画設定
            if self.legend_flag:  # 一回のみ凡例を描画
                self.ax[0].set_title("Sim Environment")
                # self.ax[1].axhline(OVER_CAPACITY, ls = "--", color = "black", label = "×1 standard line")
                self.ax[1].axhline(2, ls = "--", color = "red", label = "×2 line (Threshold)")
                self.ax[1].axhline(OVER_CAPACITY, ls = "--", color = "black", label = "×1 standard line")
                self.ax[0].scatter(0, -20, marker="o", color='r', label = "Agent")
                self.ax[0].scatter(0, -20, marker="s", color='green', label="Node")
                self.ax[0].scatter(0, -20, marker="s", color='grey', label="Path")
                # self.ax[1].plot(self.T, self.Stress_List, color="orange", alpha=0.7, label = "Stress Value by Agent")
                self.ax[1].plot(self.T, self.Stress_List, color="orange", alpha=0.7, label = "Stress")
                self.legend_flag = False

            
    def view_anim(self): #　初期化関数とフレームごとの描画関数を用いて動画を作成する
        self.anim = animation.ArtistAnimation(self.fig, self.ims, interval=450, repeat = True) # False)
        # self.anim = animation.ArtistAnimation(self.fig, self.ims, interval=15, repeat = True)
        # self.anim = animation.ArtistAnimation(self.fig, self.ims, interval=250, repeat = True)
        # self.ani = animation.ArtistAnimation(self.fig, self.ims, interval=250)
        # plt.legend(loc='lower right')
        # plt.legend(loc='center')
        self.ax[0].legend(loc='upper right')
        self.ax[1].legend(loc='lower right')
        # self.ax[2].legend(loc='upper right')
        # self.ax[3].legend(loc='upper right')
        # self.ax[4].legend(loc='lower right')
        plt.show()
        return True


if __name__ == "__main__":


    # case2
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    # case1
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    
    "-- test1104 --"
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8]]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8]]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8]]

    "refer 変更"
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [7, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8]]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8]]
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]

    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [2, 8], [1, 8], [0, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [18, 8], [18, 8]]
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [2, 8], [1, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [2, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8]]

    "case3" "1106-Case2"
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [7, 8], [8, 8], [9, 8], [9, 8], [9, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8]]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [23, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [13, 8], [13, 8], [13, 8], [14, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [22, 8], [22, 8], [22, 8], [22, 8], [21, 8], [20, 8], [19, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [9, 8], [9, 8]]
    
    Env_Anim = Anim(STATE_HISTORY)

    print("STATE_HISTORY:{}".format(Env_Anim.state_history))
    print("length:{}".format(len(Env_Anim.state_history)))

    Env_Anim.view_plot_text()
    Env_Anim.move_history()
    Env_Anim.view_anim()

    