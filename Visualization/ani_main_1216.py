from cProfile import label
import matplotlib.pyplot as plt
from matplotlib import animation
import numpy as np
from matplotlib import patches
from matplotlib import animation, gridspec
from sklearn import preprocessing

# from ani_integrate_test3_meet import STATE_HISTORY

# エージェントの移動の様子を可視化します
# 参考URL http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/

# animation_Edit.py の整理ver.
# ani_integrate_test3_main.py の整理ver.

class Anim():
    
    def __init__(self, STATE_HISTORY, stress, phi, standard):

        self.state_history = STATE_HISTORY
        self.stress = stress
        # self.fig = plt.figure(figsize=(7, 7))
        self.fig = plt.figure(figsize=(8, 8.5))
        self.ax = plt.gca()
        self.ims = []

        # self.gs = gridspec.GridSpec(2, 2, height_ratios=(1, 1))
        # self.gs = gridspec.GridSpec(2, 2, height_ratios=(3, 1))
        self.gs = gridspec.GridSpec(3, 3) # , height_ratios=(1, 1))
        # self.ax = [plt.subplot(self.gs[0, 2]), plt.subplot(self.gs[0, 1]), plt.subplot(self.gs[1, 1])]
        ss1 = self.gs.new_subplotspec((0, 0), rowspan=3,colspan=1)
        ss2 = self.gs.new_subplotspec((1, 1), rowspan=1,colspan=2)
        ss3 = self.gs.new_subplotspec((2, 1), rowspan=1,colspan=2)
        ss4 = self.gs.new_subplotspec((0, 1), rowspan=1,colspan=2)
        self.ax = [plt.subplot(ss1), plt.subplot(ss2), plt.subplot(ss3), plt.subplot(ss4)] # , plt.subplot(ss5)]
        "-----------------------------------------------------"
        # グラフデータの初期化
        self.T = []
        # Statas数推移
        self.Stress_List = []
        self.im = []
        self.TEST = []
        self.legend_flag = True
        self.phi = phi
        self.standard = standard
        self.standard_list = []

    def view_plot_text(self):

        import matplotlib.pyplot as plt

        
        import numpy as np
        from PIL import Image

        # plt.plot([20.5], [20.5], marker="s", color='black', markersize = 520, alpha = 0.8)
        self.ax[0].plot([20.5], [20.5], marker="s", color='black', markersize = 520, alpha = 0.8)

        # 描画範囲の設定と目盛りを消す設定
        self.ax[0].set_xlim(-7.5, 41.5)
        self.ax[0].set_ylim(-10.5, 51.5)
        self.ax[0].tick_params(axis='both', which='both', bottom='off', top='off',
                        labelbottom='off', right='off', left='off', labelleft='off')
        # self.ax[0].legend()
        test = [[22, 8], [23, 8], [24, 8], [25, 8], [26, 8], [27, 8], [21, 8], [20, 8], [19, 8], [18, 8], [17, 8], [16, 8], [15, 8], [14, 8], [13, 8], [12, 8], [11, 8], [10, 8], [9, 8], [8, 8], [7, 8], [6, 8], [5, 8], [4, 8], [3, 8], [2, 8], [1, 8], [0, 8]]

        # 格子状
        # test = [[22, 8], [23, 8], [23, 9], [23, 7], [23, 6], [24, 6], [22, 6], [21, 6], [23, 5], [23, 4], [24, 4], [25, 4], [26, 4], [22, 4], [21, 4], [20, 4], [19, 4], [18, 4], [18, 5], [18, 6], [17, 4], [18, 3], [18, 2], [17, 2], [16, 2], [15, 2], [14, 2], [13, 2], [12, 2], [13, 3], [13, 1], [13, 0], [12, 0], [11, 0], [10, 0], [14, 0], [15, 0], [16, 0], [9, 0], [8, 0], [7, 0], [11, 2], [10, 2], [9, 2], [8, 2], [7, 2], [6, 2], [5, 2], [6, 1], [6, 3], [6, 4], [6, 5], [5, 4], [4, 4], [3, 4], [2, 4], [6, 6], [7, 6], [8, 6], [6, 7], [6, 8], [7, 8], [6, 9], [6, 10], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [13, 9], [13, 10], [12, 10], [11, 10], [10, 10], [9, 10], [8, 10], [7, 10], [5, 8], [13, 7], [4, 8], [3, 8], [2, 8], [1, 8], [0, 8], [0, 7], [0, 9], [0, 10], [1, 10], [2, 10], [3, 10], [4, 10], [5, 10], [13, 6], [14, 6], [15, 6], [16, 6], [17, 6], [18, 7], [18, 8], [19, 8], [17, 8], [16, 8], [15, 8], [18, 9], [18, 10], [19, 10], [17, 10], [16, 10], [15, 10], [14, 10], [18, 11], [20, 10], [21, 10], [22, 10], [23, 10], [23, 11], [23, 12], [22, 12], [23, 13], [24, 12], [25, 12], [26, 12], [24, 10], [21, 12], [23, 14], [20, 12], [19, 12], [18, 12], [18, 13], [18, 14], [18, 15], [18, 16], [19, 16], [20, 16], [21, 16], [17, 16], [22, 16], [23, 16], [24, 16], [25, 16], [23, 15], [25, 10], [24, 8], [25, 8], [21, 8], [26, 10], [22, 14], [21, 14], [24, 14], [25, 14], [26, 14], [27, 14], [28, 14], [28, 15], [20, 14], [17, 12], [19, 14], [17, 14], [16, 14], [15, 14], [14, 14], [13, 14], [13, 15], [13, 13], [13, 12], [14, 12], [13, 11], [12, 12], [11, 12], [20, 8], [19, 6], [28, 13], [25, 6], [26, 6], [27, 6], [28, 6], [28, 7], [28, 5], [28, 4], [27, 4], [23, 3], [23, 2], [22, 2], [21, 2], [20, 2], [23, 1], [24, 2], [23, 0], [22, 0], [21, 0], [20, 0], [24, 0], [25, 0], [25, 2], [26, 2], [27, 2], [28, 2], [28, 1], [28, 3], [28, 8], [26, 8], [27, 8], [27, 10], [28, 10], [28, 11], [28, 12], [27, 12], [28, 16], [27, 16], [26, 16], [28, 9], [12, 6], [13, 5], [13, 4], [14, 4], [15, 4], [12, 4], [5, 6], [9, 6], [10, 6], [11, 6], [12, 14], [13, 16], [14, 16], [15, 16], [15, 12], [12, 16], [11, 16], [10, 16], [9, 16], [8, 16], [10, 12], [9, 12], [8, 12], [7, 12], [16, 4], [11, 4], [10, 4], [9, 4], [8, 4], [7, 4], [19, 2], [18, 1], [18, 0], [17, 0], [19, 0], [6, 0], [5, 0], [4, 0], [3, 0], [28, 0], [20, 6], [1, 4], [0, 4], [0, 3], [0, 2], [1, 2], [2, 2], [3, 2], [4, 2], [0, 1], [0, 5], [0, 6], [1, 6], [2, 6], [3, 6], [4, 6], [16, 12], [6, 12], [6, 13], [6, 14], [7, 14], [5, 14], [6, 15], [8, 14], [9, 14], [10, 14], [11, 14], [6, 11], [0, 11], [0, 12], [1, 12], [2, 12], [3, 12], [4, 12], [5, 12], [0, 13], [0, 0], [1, 0], [2, 0], [27, 0], [26, 0], [16, 16], [0, 14], [0, 15], [1, 14], [2, 14], [3, 14], [4, 14], [0, 16], [6, 16], [7, 16], [5, 16], [4, 16], [3, 16], [2, 16], [1, 16]]
        for t in range(len(test)):


            state = test[t]
            y = 46-(state[0] + state[0] + 0.5) # 14.5)
            x = state[1] + state[1] + 0.5

            self.ax[0].plot([x], [y], marker="s", color='grey', markersize = 18)

        LandMark = [[27, 8], [22, 8], [18, 8], [13, 8], [9, 8], [5, 8],  [0, 8]]
        "1106"
        LandMark = [[23, 8], [18, 8], [12, 8], [5, 8]] # , [5, 8],  [0, 8]]
        "マス固定"
        LandMark = [[22, 8], [17, 8], [12, 8], [7, 8], [2, 8]]
        
        "xのみ"
        LandMark = [[27, 8], [25, 8], [22, 8], [19, 8], [16, 8], [13, 8], [10, 8], [7, 8], [4, 8]]
        LandMark = [[24, 8], [21, 8], [18, 8], [15, 8], [12, 8], [9, 8], [6, 8], [3, 8], [0, 8]]


        # self.ax[0].plot([20.5], [20.5], marker="s", color='black', markersize = 520, alpha = 0.8)
        # for t in range(len(LandMark)):
        #     state = LandMark[t]
        #     y = 46-(state[0] + state[0] + 0.5) # 14.5)
        #     x = state[1] + state[1] + 0.5

        #     if state == [0, 8]:
        #         # self.ax[0].plot([x], [y], marker="s", color='orange', markersize = 18, alpha = 0.5)
        #         # self.ax[0].plot([x], [y], marker="s", color='red', markersize = 18, alpha = 0.5)
        #         pass

        #     if state == [25, 8] or state == [22, 8]: # [12, 8] or state == [7, 8] or state == [2, 8]:
        #         # self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
        #         self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)
        #         # pass
        #     elif state == [27, 8]:
        #         pass
            
        #     # 1024
        #     # add 1007
        #     # elif state == [5, 8]: # or state == [9, 8]: # or state == [5, 8]:
        #     #     # self.ax[0].plot([x], [y], marker="s", color='orange', markersize = 18, alpha = 0.5)
        #     #     self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
        #     #     # self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 28, alpha = 0.5)
        #     #     # pass
        #     else:
        #         # self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)
        #         self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
        
        "n=4"
        for t in range(len(LandMark)):
            state = LandMark[t]
            y = 46-(state[0] + state[0] + 0.5) # 14.5)
            x = state[1] + state[1] + 0.5
            # if state == [13, 8] or state == [10, 8] or state == [7, 8] or state == [4, 8]: # [12, 8] or state == [7, 8] or state == [2, 8]:
            if state == [12, 8] or state == [9, 8] or state == [6, 8] or state == [3, 8]: # or state == [0, 8]:
                self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
            # elif state == [27, 8]:
            elif state == [0, 8]:
                pass
            else:
                self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)
        "n=3"
        # for t in range(len(LandMark)):
        #     state = LandMark[t]
        #     y = 46-(state[0] + state[0] + 0.5)
        #     x = state[1] + state[1] + 0.5
        #     if state == [15, 8] or state == [12, 8] or state == [9, 8] or state == [6, 8] or state == [3, 8]:
        #         self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
        #     elif state == [0, 8]:
        #         pass
        #     else:
        #         self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)
        "oooxo"
        # for t in range(len(LandMark)):
        #     state = LandMark[t]
        #     y = 46-(state[0] + state[0] + 0.5)
        #     x = state[1] + state[1] + 0.5
        #     if state == [15, 8] or state == [9, 8] or state == [6, 8] or state == [3, 8]:
        #         self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
        #     elif state == [0, 8]:
        #         pass
        #     else:
        #         self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)
        "oxoxo"
        # for t in range(len(LandMark)):
        #     state = LandMark[t]
        #     y = 46-(state[0] + state[0] + 0.5)
        #     x = state[1] + state[1] + 0.5
        #     if state == [21, 8] or state == [15, 8] or state == [9, 8] or state == [6, 8] or state == [3, 8]:
        #         self.ax[0].plot([x], [y], marker="s", color='blue', markersize = 18, alpha = 0.5)
        #     elif state == [0, 8]:
        #         pass
        #     else:
        #         self.ax[0].plot([x], [y], marker="s", color='green', markersize = 18, alpha = 0.5)

                
    def move_history(self):

        OVER_CAPACITY = 1.0
        x_vals = np.array([0.0, 1.0])
        # probability = np.array([phi, 1.0 - phi])

        for t in range(len(self.stress)): # state_history)): # フレームごとの描画内容

            self.T.append(t)
            self.im = []

            self.Stress_List.append(self.stress[t])
            # self.im += (self.ax[1].plot(self.T, self.Stress_List, color="orange", alpha=0.7))
            self.im += (self.ax[1].plot(self.T, self.Stress_List, color="red", alpha=0.5))


            "Add 割合+基準距離"
            try:
                cm = plt.get_cmap("Purples")
                self.probability = (np.array([self.phi[t], 1.0 - self.phi[t]]))
                color_maps = [cm(self.phi[t]), cm(1-self.phi[t])]
                self.im += self.ax[2].bar(x_vals, self.probability, color=color_maps)
            except:
                pass
            
            try:
                self.standard_list.append(self.standard[t])
                self.im += (self.ax[3].plot(self.T, self.standard_list, color="orange", alpha=0.7))
            except:
                pass
            "Add 割合+基準距離"

            

            state = self.state_history[t]  # 現在の場所を描く

            try:
                prev_state = self.state_history[t-1]
            except:
                pass
            

            if state[1] != 0:
                y = 46-(state[0] + state[0] + 0.5) # 14.5)
                x = state[1] + state[1] + 0.5
            else:
                x = 0.5
                y = 46-(state[0] + state[0] + 0.5) # 14.5)
                
            try:
                if state == prev_state:
                    
                    if state[0] == prev_state[0]:
                        # self.im += self.ax[0].plot(x, y, marker="s", color='y', markersize = 18, alpha = 0.5)
                        self.im += self.ax[0].plot(x, y, marker="o", color='y', markersize = 8)
                    else:
                        # self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 15, alpha = 0.5)
                        self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 8)

                   
                else:
                    # self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 15, alpha = 0.5)
                    self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 8)
            except:
                print("エラー(初回)")
                # self.im += self.ax[0].plot(x, y, marker="s", color='r', markersize = 15, alpha = 0.5)
                self.im += self.ax[0].plot(x, y, marker="o", color='r', markersize = 8)
            self.ims.append(self.im)
            
            if t == 0:
                self.ims.append(self.im)

            #描画設定
            if self.legend_flag:  # 一回のみ凡例を描画
                self.ax[0].set_title("Sim Environment")
                # self.ax[1].axhline(OVER_CAPACITY, ls = "--", color = "black", label = "×1 standard line")
                # self.ax[1].axhline(2, ls = "--", color = "red", label = "×2 (Threshold)")
                # self.ax[1].axhline(OVER_CAPACITY, ls = "--", color = "black", label = "×1 standard")
                self.ax[1].axhline(0, ls = "--", color = "black", label = "stress free")
                self.ax[0].scatter(0, -20, marker="o", color='r', label = "Agent")
                # self.ax[0].scatter(0, -20, marker="s", color='green', label="Node")
                self.ax[0].scatter(0, -20, marker="s", color='green', label="Node ◯", alpha=0.5)
                self.ax[0].scatter(0, -20, marker="s", color='blue', label="Node ×", alpha=0.5)
                self.ax[0].scatter(0, -20, marker="s", color='grey', label="Path", alpha=0.5)
                # self.ax[1].plot(self.T, self.Stress_List, color="orange", alpha=0.7, label = "Stress Value by Agent")
                # self.ax[1].plot(self.T, self.Stress_List, color="orange", alpha=0.7, label = "Stress")
                self.ax[1].plot(self.T, self.Stress_List, color="red", alpha=0.5, label = "Stress")

                self.ax[2].plot([-0.5, 1.5], [0.5, 0.5], color='r', linestyle='--', label='half in doubt(0.5)') # 平均
                self.ax[2].set_xticks(ticks=[0, 1]) # x軸目盛
                self.ax[3].axhline(2, ls = "--", color = "red", label = "×2")
                self.ax[3].plot(self.T, self.Stress_List, color="orange", alpha=0.7, label = "standard")
                self.legend_flag = False

            # self.fig.savefig(f"/Users/ken/Desktop/src/practice/1107_meeting/fig2/img{t}.png")


    def view_anim(self): #　初期化関数とフレームごとの描画関数を用いて動画を作成する
        self.anim = animation.ArtistAnimation(self.fig, self.ims, interval=350, repeat = True) # False)
        # self.anim = animation.ArtistAnimation(self.fig, self.ims, interval=15, repeat = True)
        # self.anim = animation.ArtistAnimation(self.fig, self.ims, interval=250, repeat = True)
        # self.ani = animation.ArtistAnimation(self.fig, self.ims, interval=250)
        # plt.legend(loc='lower right')
        # plt.legend(loc='center')
        self.ax[0].legend(loc='upper right')
        self.ax[1].legend(loc='lower right')
        self.ax[2].legend(loc='upper left')
        self.ax[3].legend(loc='upper right')
        # self.ax[4].legend(loc='lower right')
        
        "1120 meeting Reluを見やすくするために追加"
        # self.ax[1].set_ylim(-0.1, 1.5)
        # self.ax[1].set_xlim(-1, 50)
        plt.show()
        return True


if __name__ == "__main__":

    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    stress = [0.0, 0.333, 0.666, 0.9990000000000001, 0.1, 0.32200000000000006, 0.544, 0.766, 0.1, 0.2665, 0.43300000000000005, 0.5995, 0.1, 0.2332, 0.36639999999999995, 0.49959999999999993, 0.1, 0.211, 0.32199999999999995, 0.7187142857142856, 0.3857142857142857, 0.576, 0.7662857142857142, 1.3315714285714284, 0.7607142857142856, 1.0104642857142856, 1.2602142857142855, 1.95440873015873, 1.2051587301587299, 1.50115873015873, 1.79715873015873, 2.5931587301587298, 1.7051587301587299, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 1.1381587301587301, 1.1381587301587301, 2.036, 2.036, 2.036, 2.036, 1.1360000000000001, 1.1360000000000001, 2.136, 2.136, 2.136, 2.136, 1.2360000000000002, 1.2360000000000002, 2.277, 2.277, 2.277, 2.277, 1.3770000000000002, 1.3770000000000002, 2.158, 2.158]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    stress = [0.0, 0.333, 0.666, 0.9990000000000001, 0.1, 0.32200000000000006, 0.544, 0.766, 0.1, 0.2665, 0.43300000000000005, 0.5995, 0.1, 0.2332, 0.36639999999999995, 0.49959999999999993, 0.1, 0.211, 0.32199999999999995, 0.7187142857142856, 0.3857142857142857, 0.576, 0.7662857142857142, 1.3315714285714284, 0.7607142857142856, 1.0104642857142856, 1.2602142857142855, 1.95440873015873, 1.2051587301587299, 1.50115873015873, 1.79715873015873, 2.5931587301587298, 1.7051587301587299, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 2.03815873015873, 1.1381587301587301, 1.1381587301587301, 2.254, 2.254, 2.254, 2.254, 1.354, 1.354, 2.013, 2.013, 2.013, 2.013, 1.113, 1.113, 2.296, 2.296, 2.296, 2.296, 1.396, 1.396, 2.051, 2.051]

    "蓄積分"
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [2, 8], [1, 8], [0, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    # stress = [0, 0, 0, 0, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.3857142857142857, 0.3857142857142857, 0.3857142857142857, 0.3857142857142857, 0.7607142857142857, 0.7607142857142857, 0.7607142857142857, 0.7607142857142857, 1.20515873015873, 1.20515873015873, 1.20515873015873, 1.20515873015873, 1.70515873015873, 1.70515873015873, 1.70515873015873, 1.70515873015873, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 2.2506132756132757, 1.3506132756132758, 1.3506132756132758, 2.22, 2.22, 2.22, 2.22, 1.3200000000000003, 1.3200000000000003, 2.484, 2.484, 2.484, 2.484, 1.584, 1.584, 2.313, 2.313, 2.313, 2.313, 1.4130000000000003, 1.4130000000000003, 2.022, 2.022]
    # stress = [0, 0, 0, 0, 0.3, 0.3, 0.3, 0.3, 0.6, 0.6, 0.6, 0.6, 0.8999999999999999, 0.8999999999999999, 0.8999999999999999, 0.8999999999999999, 1.2, 1.2, 1.2, 1.8666666666666667, 1.8666666666666667, 1.8666666666666667, 1.8666666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 2.6166666666666667, 1.7156666666666667, 1.7156666666666667, 2.19, 2.19, 2.19, 2.19, 1.391, 1.391, 2.435, 2.435, 2.435, 2.435, 2.435, 2.435, 2.435, 1.834, 1.834, 2.014, 2.014, 2.014, 2.014, 1.7129999999999996, 1.7129999999999996, 2.141, 2.141]
    STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [2, 8], [1, 8], [0, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    stress = [0, 0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.30000000000000004, 0.5857142857142857, 0.5857142857142857, 0.5857142857142857, 0.5857142857142857, 0.9607142857142857, 0.9607142857142857, 0.9607142857142857, 0.9607142857142857, 1.40515873015873, 1.40515873015873, 1.40515873015873, 1.40515873015873, 1.90515873015873, 1.90515873015873, 1.90515873015873, 1.90515873015873, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 2.4506132756132755, 1.5506132756132756, 1.5506132756132756, 2.408, 2.408, 2.408, 2.408, 1.6079999999999999, 1.6079999999999999, 2.116, 2.116, 2.116, 2.116, 1.4820000000000002, 1.4820000000000002, 2.067, 2.067, 2.067, 2.067, 1.866, 1.866, 2.122, 2.122]
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    # stress = [0.0, 0.333, 0.666, 0.9990000000000001, 0.2, 0.42200000000000004, 0.6440000000000001, 0.8660000000000001, 0.3, 0.4665, 0.633, 0.7995, 0.3, 0.4332, 0.5664, 0.6996, 0.3, 0.411, 0.522, 0.9187142857142857, 0.5857142857142857, 0.776, 0.9662857142857143, 1.5315714285714286, 0.9607142857142857, 1.2104642857142858, 1.4602142857142857, 2.15440873015873, 1.40515873015873, 1.70115873015873, 1.9971587301587301, 2.79315873015873, 1.90515873015873, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 2.2381587301587302, 1.5381587301587303, 1.5381587301587303, 2.302, 2.302, 2.302, 2.302, 1.602, 1.602, 2.331, 2.331, 2.331, 2.331, 1.631, 1.631, 2.483, 2.483, 2.483, 2.483, 1.683, 1.683, 2.239, 2.239]
    
    "基準距離"
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [3, 8], [2, 8], [1, 8], [0, 8], [1, 8], [2, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    standard_list = [0.0, 0.333, 0.666, 0.9990000000000001, 0, 0.22200000000000003, 0.44400000000000006, 0.6660000000000001, 0, 0.1665, 0.333, 0.49950000000000006, 0, 0.13319999999999999, 0.26639999999999997, 0.39959999999999996, 0, 0.11099999999999999, 0.22199999999999998, 0.33299999999999996, 0, 0.19028571428571428, 0.38057142857142856, 0.5708571428571428, 0, 0.24975000000000003, 0.49950000000000006, 0.7492500000000001, 0, 0.296, 0.592, 0.8879999999999999, 0, 0.333, 0.666, 0.9990000000000001, 0, 0, 0, 0]
    # stress = standard_list
    "○の割合"
    rate_list = [0.5, 0.5, 0.5, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.75, 0.75, 0.75, 0.75, 0.8, 0.8, 0.8, 0.8, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.8333333333333334, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.7142857142857143, 0.625, 0.625, 0.625, 0.625, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5, 0.5, 0.5, 0.5, 0.45454545454545453, 0.5, 0.5, 0.5, 0.5]
    "×の割合"
    # rate_list = [0.5, 0.5, 0.5, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.25, 0.25, 0.25, 0.25, 0.2, 0.2, 0.2, 0.2, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.375, 0.375, 0.375, 0.375, 0.4444444444444444, 0.4444444444444444, 0.4444444444444444, 0.4444444444444444, 0.5, 0.5, 0.5, 0.5, 0.5454545454545454, 0.5, 0.5, 0.5, 0.5]
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    rate_list = [0.5, 0.5, 0.5, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.25, 0.25, 0.25, 0.25, 0.2, 0.2, 0.2, 0.2, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.375, 0.375, 0.375, 0.375, 0.4444444444444444, 0.4444444444444444, 0.4444444444444444, 0.4444444444444444, 0.5, 0.5, 0.5, 0.5, 0.5]
    # STATE_HISTORY = [[27, 8], [26, 8], [25, 8], [24, 8], [24, 8], [23, 8], [22, 8], [21, 8], [21, 8], [20, 8], [19, 8], [18, 8], [18, 8], [17, 8], [16, 8], [15, 8], [15, 8], [14, 8], [13, 8], [12, 8], [12, 8], [11, 8], [10, 8], [9, 8], [9, 8], [8, 8], [7, 8], [6, 8], [6, 8], [5, 8], [4, 8], [3, 8], [4, 8], [5, 8], [6, 8], [7, 8], [8, 8], [9, 8], [10, 8], [11, 8], [12, 8], [13, 8], [14, 8], [15, 8], [15, 8], [15, 8], [15, 8], [16, 8], [17, 8], [18, 8], [18, 8], [18, 8], [18, 8], [19, 8], [20, 8], [21, 8], [21, 8], [21, 8], [21, 8], [22, 8], [23, 8], [24, 8], [24, 8], [24, 8], [24, 8]]
    rate_list = [0.5, 0.5, 0.5, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.25, 0.25, 0.25, 0.25, 0.2, 0.2, 0.2, 0.2, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.2857142857142857, 0.375, 0.375, 0.375, 0.375, 0.4444444444444444, 0.4444444444444444, 0.4444444444444444, 0.4444444444444444, 0.5, 0.16666666666666666, 0.2, 0.25, 0.3333333333333333]
    # stress = rate_list

    
    Env_Anim = Anim(STATE_HISTORY, stress, rate_list, standard_list)

    print("STATE_HISTORY:{}".format(Env_Anim.state_history))
    print("length:{}".format(len(Env_Anim.state_history)))
    print("length rate:{}".format(len(rate_list)))

    Env_Anim.view_plot_text()
    Env_Anim.move_history()
    Env_Anim.view_anim()

    