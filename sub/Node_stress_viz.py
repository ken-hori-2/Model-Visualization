import math
import random
import copy
import matplotlib.pyplot as plt
from matplotlib import animation, rc, gridspec, test
# from IPython.display import HTML

N = 10 # 200  # エージェントの個数
SIZE = N   # 仮想空間のサイズ
TIMELIMIT = 30 # 100 # 30 # 200  # シミュレーションの打ち切り時刻

OVER_CAPACITY = 5 # N/2

# グラフデータの初期化
T = []
# Statas数推移
Stress_List= []


"---------------------------------------------------------------------------------"
#描画するグラフの設定
# fig = plt.figure(figsize=(7.5,5))
fig = plt.figure(figsize=(8, 7))
# gs = gridspec.GridSpec(2, 2, height_ratios=(3, 1))
gs = gridspec.GridSpec(2, 2, height_ratios=(1, 1))
# ax = [plt.subplot(gs[0, 0]), plt.subplot(gs[0, 1])]

"-----------------------------------------------------"
# ax = [plt.subplot(gs[0, 0]), plt.subplot(gs[1, 0])]
ax = [plt.subplot(gs[0, 0]), plt.subplot(gs[1, 0]), plt.subplot(gs[1, 1])]
"-----------------------------------------------------"


# ax = [plt.subplot(gs[1, 0])]

#アニメーション用のグラフ保管場所
ims = []

legend_flag = True  # 凡例描画のフラグ


history_S = [0,0.6,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
# history_S = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_A = [0,0  ,0  ,0.4,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
history_B = [0,0  ,0  ,0  ,0  ,0.7,0.0,0.0,0.0,0.0,0.0,0.0]
history_C = [0,0  ,0  ,0  ,0  ,0  ,0  ,0.5,0.0,0.0,0.0,0.0]
history_D = [0,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0.3,0.0,0.0]
history_G = [0,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0  ,0.8]

"-----------------------------"
# Add 1029
history_S = [0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_G = [0, 0, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_B = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_C = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_D = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

# Dを発見できないver.
history_S = [0.4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_G = [0, 0, 0, 0, 0, 0, 0, 0.2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_B = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_C = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
history_D = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
"-----------------------------"


S_x = [-1]
G_x = [0] # "O"
A_x = [1]
B_x = [2]
C_x = [3]
D_x = [4]
# G_x = [5]
S = [0]
A = [0]
B = [0]
C = [0]
D = [0]
G = [0]

TIMELIMIT = len(history_S)
OVER_CAPACITY = 1 # 10

# エージェントシミュレーション
for t in range(TIMELIMIT):
    T.append(t)

   
    im = []

    
    # S[0] = history_S[t]
    # A[0] = history_A[t]
    # B[0] = history_B[t]
    # C[0] = history_C[t]
    # D[0] = history_D[t]
    # G[0] = history_G[t]
    S.append(history_S[t])
    A.append(history_A[t])
    B.append(history_B[t])
    C.append(history_C[t])
    D.append(history_D[t])
    G.append(history_G[t])

    # im += ax[1].stackplot(T, Stress_List, colors=["r"], alpha=0.7)
    # im += ax[1].plot(T, Stress_List, color="orange", alpha=0.7)
    # im += ax[0].bar(T, Stress_List, color="orange", alpha=0.7)
    # im += ax[2].stackplot(T, Stress_List, colors=["r"], alpha=0.7)
    im += ax[1].bar(S_x, S, color='blue')
    im += ax[1].bar(A_x, A, color='green')
    im += ax[1].bar(B_x, B, color='yellow')
    im += ax[1].bar(C_x, C, color='orange')
    im += ax[1].bar(D_x, D, color='red')
    im += ax[1].bar(G_x, G, color='purple')

    #描画設定
    if legend_flag:  # 一回のみ凡例を描画
        # ax[0].set_title("Simulation")
        ax[0].set_title("Change in stress values(Bar ver.)")
        ax[0].axhline(OVER_CAPACITY, ls = "--", color = "black")
        
        ax[1].set_title("Change in stress values(Line ver.)")
        ax[1].axhline(OVER_CAPACITY, ls = "--", color = "black")

        ax[2].set_title("Change in stress values(Stackplot ver.)")
        ax[2].axhline(OVER_CAPACITY, ls = "--", color = "black")
        
        legend_flag = False
    

    ims.append(im)

# ani = animation.ArtistAnimation(fig, ims, interval=300) # 150) # 70)
# ani = animation.ArtistAnimation(fig, ims, interval=250)
ani = animation.ArtistAnimation(fig, ims, interval=220)
ani
plt.show()